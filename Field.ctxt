#BlueJ class context
comment0.params=depth\ width
comment0.target=Field(int,\ int)
comment0.text=\nRepresent\ a\ field\ of\ the\ given\ dimensions.\n@param\ depth\ The\ depth\ of\ the\ field.\n@param\ width\ The\ width\ of\ the\ field.\n\n
comment1.target=void\ clear()
comment1.text=\nEmpty\ the\ field.\n\n
comment2.params=animal
comment2.target=void\ place(Animal)
comment2.text=\nPlace\ an\ animal\ in\ the\ field.\nIf\ there\ is\ already\ an\ animal\ at\ the\ same\nlocation\ it\ will\ be\ lost.\n@param\ animal\ The\ animal\ to\ be\ placed.\n\n
comment3.params=location
comment3.target=Animal\ getAnimalAt(Location)
comment3.text=\nReturn\ the\ animal\ at\ the\ given\ location,\ if\ any.\n@param\ location\ Where\ in\ the\ field.\n@return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\n\n
comment4.params=row\ col
comment4.target=Animal\ getAnimalAt(int,\ int)
comment4.text=\nReturn\ the\ animal\ at\ the\ given\ location,\ if\ any.\n@param\ row\ The\ desired\ row.\n@param\ col\ The\ desired\ column.\n@return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\n\n
comment5.params=location
comment5.target=Location\ randomAdjacentLocation(Location)
comment5.text=\nGenerate\ a\ random\ location\ that\ is\ adjacent\ to\ the\ngiven\ location,\ or\ is\ the\ same\ location.\nThe\ returned\ location\ will\ be\ within\ the\ valid\ bounds\nof\ the\ field.\n@param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\n@return\ A\ valid\ location\ within\ the\ grid\ area.\ This\nmay\ be\ the\ same\ object\ as\ the\ location\ parameter.\n\n
comment6.params=location
comment6.target=Location\ freeAdjacentLocation(Location)
comment6.text=\nTry\ to\ find\ a\ free\ location\ that\ is\ adjacent\ to\ the\ngiven\ location.\ If\ there\ is\ none,\ then\ return\ the\ current\nlocation\ if\ it\ is\ free.\ If\ not,\ return\ null.\nThe\ returned\ location\ will\ be\ within\ the\ valid\ bounds\nof\ the\ field.\n@param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\n@return\ A\ valid\ location\ within\ the\ grid\ area.\ This\ may\ be\ the\nsame\ object\ as\ the\ location\ parameter,\ or\ null\ if\ all\nlocations\ around\ are\ full.\n\n
comment7.params=location
comment7.target=Iterator<Location>\ adjacentLocations(Location)
comment7.text=\nGenerate\ an\ iterator\ over\ a\ shuffled\ list\ of\ locations\ adjacent\nto\ the\ given\ one.\ The\ list\ will\ not\ include\ the\ location\ itself.\nAll\ locations\ will\ lie\ within\ the\ grid.\n@param\ location\ The\ location\ from\ which\ to\ generate\ adjacencies.\n@return\ An\ iterator\ over\ locations\ adjacent\ to\ that\ given.\n\n
comment8.target=int\ getDepth()
comment8.text=\nReturn\ the\ depth\ of\ the\ field.\n@return\ The\ depth\ of\ the\ field.\n\n
comment9.target=int\ getWidth()
comment9.text=\nReturn\ the\ width\ of\ the\ field.\n@return\ The\ width\ of\ the\ field.\n\n
numComments=10
